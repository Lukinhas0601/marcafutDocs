{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documenta\u00e7\u00e3o Marcafut Bem-vindo \u00e0 documenta\u00e7\u00e3o oficial do projeto Marcafut. Aqui, detalhamos meticulosamente todo o fluxo de trabalho, os testes realizados, os componentes utilizados e os endpoints para nossa API. Prop\u00f3sito Nosso objetivo \u00e9 fornecer uma vis\u00e3o abrangente de todas as etapas do desenvolvimento, garantindo uma compreens\u00e3o clara de cada aspecto do projeto Marcafut. Desde o planejamento at\u00e9 a implanta\u00e7\u00e3o, voc\u00ea encontrar\u00e1 informa\u00e7\u00f5es detalhadas para facilitar o desenvolvimento, manuten\u00e7\u00e3o e integra\u00e7\u00e3o de nossos produtos. Reposit\u00f3rio GitLab Todo o c\u00f3digo-fonte do projeto Marcafut est\u00e1 hospedado em nossos reposit\u00f3rios no GitLab. Cada um de nossos produtos possui seu pr\u00f3prio reposit\u00f3rio dedicado, permitindo uma gest\u00e3o eficiente do versionamento e colabora\u00e7\u00e3o entre equipes. Tecnologias Utilizadas Nossa stack tecnol\u00f3gica \u00e9 diversificada e adaptada \u00e0s necessidades espec\u00edficas de cada componente do projeto. Entre as tecnologias utilizadas, destacam-se o React para o desenvolvimento dos produtos Web e Java para a API, entre outras ferramentas e bibliotecas que contribuem para a robustez e efici\u00eancia do projeto. Produtos Web Admin : O Admin \u00e9 respons\u00e1vel por todas as configura\u00e7\u00f5es do sistema, incluindo o cadastro de novos centros esportivos, configura\u00e7\u00f5es de agenda, logs e muito mais. CE Web (Central do Esportista) : A CE Web \u00e9 uma plataforma onde os propriet\u00e1rios de centros esportivos podem gerenciar seus estabelecimentos. Eles podem marcar hor\u00e1rios, gerenciar os fluxos, criar aulas, ver os indicadores financeiros e muito mais. Jogador Web : A vers\u00e3o Web para jogadores permite que os usu\u00e1rios visualizem os centros esportivos, realizem agendamentos e executem outras fun\u00e7\u00f5es (ainda em desenvolvimento). Mobile App CE : O App CE oferece as mesmas funcionalidades da CE Web, com notifica\u00e7\u00f5es nativas no celular, proporcionando uma experi\u00eancia ainda mais fluida e conveniente. App Jogador : O App Jogador \u00e9 uma vers\u00e3o mais completa da vers\u00e3o Web para jogadores. Os jogadores podem realizar o cadastro, acessar a localiza\u00e7\u00e3o da arena, acessar as redes sociais da arena, realizar agendamentos e receber notifica\u00e7\u00f5es nativas, proporcionando uma experi\u00eancia completa e integrada. Com esta documenta\u00e7\u00e3o, esperamos oferecer uma vis\u00e3o completa e acess\u00edvel do projeto Marcafut, proporcionando uma base s\u00f3lida para desenvolvedores e equipes envolvidas em seu desenvolvimento e manuten\u00e7\u00e3o.","title":"Home"},{"location":"#documentacao-marcafut","text":"Bem-vindo \u00e0 documenta\u00e7\u00e3o oficial do projeto Marcafut. Aqui, detalhamos meticulosamente todo o fluxo de trabalho, os testes realizados, os componentes utilizados e os endpoints para nossa API.","title":"Documenta\u00e7\u00e3o Marcafut"},{"location":"#proposito","text":"Nosso objetivo \u00e9 fornecer uma vis\u00e3o abrangente de todas as etapas do desenvolvimento, garantindo uma compreens\u00e3o clara de cada aspecto do projeto Marcafut. Desde o planejamento at\u00e9 a implanta\u00e7\u00e3o, voc\u00ea encontrar\u00e1 informa\u00e7\u00f5es detalhadas para facilitar o desenvolvimento, manuten\u00e7\u00e3o e integra\u00e7\u00e3o de nossos produtos.","title":"Prop\u00f3sito"},{"location":"#repositorio-gitlab","text":"Todo o c\u00f3digo-fonte do projeto Marcafut est\u00e1 hospedado em nossos reposit\u00f3rios no GitLab. Cada um de nossos produtos possui seu pr\u00f3prio reposit\u00f3rio dedicado, permitindo uma gest\u00e3o eficiente do versionamento e colabora\u00e7\u00e3o entre equipes.","title":"Reposit\u00f3rio GitLab"},{"location":"#tecnologias-utilizadas","text":"Nossa stack tecnol\u00f3gica \u00e9 diversificada e adaptada \u00e0s necessidades espec\u00edficas de cada componente do projeto. Entre as tecnologias utilizadas, destacam-se o React para o desenvolvimento dos produtos Web e Java para a API, entre outras ferramentas e bibliotecas que contribuem para a robustez e efici\u00eancia do projeto.","title":"Tecnologias Utilizadas"},{"location":"#produtos","text":"","title":"Produtos"},{"location":"#web","text":"Admin : O Admin \u00e9 respons\u00e1vel por todas as configura\u00e7\u00f5es do sistema, incluindo o cadastro de novos centros esportivos, configura\u00e7\u00f5es de agenda, logs e muito mais. CE Web (Central do Esportista) : A CE Web \u00e9 uma plataforma onde os propriet\u00e1rios de centros esportivos podem gerenciar seus estabelecimentos. Eles podem marcar hor\u00e1rios, gerenciar os fluxos, criar aulas, ver os indicadores financeiros e muito mais. Jogador Web : A vers\u00e3o Web para jogadores permite que os usu\u00e1rios visualizem os centros esportivos, realizem agendamentos e executem outras fun\u00e7\u00f5es (ainda em desenvolvimento).","title":"Web"},{"location":"#mobile","text":"App CE : O App CE oferece as mesmas funcionalidades da CE Web, com notifica\u00e7\u00f5es nativas no celular, proporcionando uma experi\u00eancia ainda mais fluida e conveniente. App Jogador : O App Jogador \u00e9 uma vers\u00e3o mais completa da vers\u00e3o Web para jogadores. Os jogadores podem realizar o cadastro, acessar a localiza\u00e7\u00e3o da arena, acessar as redes sociais da arena, realizar agendamentos e receber notifica\u00e7\u00f5es nativas, proporcionando uma experi\u00eancia completa e integrada. Com esta documenta\u00e7\u00e3o, esperamos oferecer uma vis\u00e3o completa e acess\u00edvel do projeto Marcafut, proporcionando uma base s\u00f3lida para desenvolvedores e equipes envolvidas em seu desenvolvimento e manuten\u00e7\u00e3o.","title":"Mobile"},{"location":"admin/admin/","text":"Admin Marcafut Bem-vindo \u00e0 documenta\u00e7\u00e3o do Admin Marcafut. Nesta se\u00e7\u00e3o, voc\u00ea encontrar\u00e1 informa\u00e7\u00f5es detalhadas sobre todas as configura\u00e7\u00f5es e funcionalidades dispon\u00edveis no Admin Marcafut. Reposit\u00f3rio GitLab Para acessar o c\u00f3digo-fonte do Admin Marcafut, voc\u00ea pode visitar o reposit\u00f3rio no GitLab: Reposit\u00f3rio GitLab Documenta\u00e7\u00e3o do Template O Admin Marcafut \u00e9 baseado em um template para frontend. Abaixo, voc\u00ea encontrar\u00e1 links para a documenta\u00e7\u00e3o e o demo do template: Documenta\u00e7\u00e3o do Template Demo do Template Consulte a documenta\u00e7\u00e3o do template para obter mais informa\u00e7\u00f5es sobre sua estrutura e funcionalidades. Tecnologias Necess\u00e1rias Para rodar o projeto localmente, \u00e9 necess\u00e1rio ter as seguintes tecnologias instaladas: Node.js : vers\u00e3o 20.11.1 ou superior npm (Node Package Manager) : vers\u00e3o 10.2.4 ou superior Certifique-se de ter essas tecnologias instaladas em seu sistema antes de prosseguir. Estrutura do Projeto O projeto \u00e9 estruturado da seguinte forma: src/assets : Esta pasta cont\u00e9m temas, imagens e outros recursos que j\u00e1 fazem parte do template. Nota : Conforme o desenvolvimento do projeto avan\u00e7a, vamos limpar esta pasta para deix\u00e1-la o mais enxuta poss\u00edvel. src/components : Aqui est\u00e3o localizados os componentes que ser\u00e3o usados no projeto. Novos componentes ser\u00e3o criados nesta pasta. src/components : \u00e9 respons\u00e1vel por gerenciar os estados globais dos componentes no projeto utilizando o contexto do React. Ele define um contexto principal chamado MaterialUIContext, que armazena e controla v\u00e1rios estados utilizados pelo projeto. O contexto \u00e9 utilizado para controlar configura\u00e7\u00f5es e funcionalidades globais do aplicativo, como a miniatura da barra lateral, a transpar\u00eancia da barra lateral e da barra de navega\u00e7\u00e3o, a cor da barra lateral, o layout, o modo escuro, entre outros. O arquivo tamb\u00e9m exporta um provedor de contexto chamado MaterialUIControllerProvider, que envolve toda a aplica\u00e7\u00e3o e fornece o contexto MaterialUI para todos os componentes filhos. Al\u00e9m disso, ele exporta um hook personalizado chamado useMaterialUIController, que pode ser utilizado para acessar e modificar os estados globais em qualquer componente que esteja dentro do MaterialUIControllerProvider. Os estados globais podem ser modificados utilizando as fun\u00e7\u00f5es exportadas no arquivo, como setMiniSidenav, setTransparentSidenav, setSidenavColor, entre outras. Essas fun\u00e7\u00f5es s\u00e3o usadas para despachar a\u00e7\u00f5es para o reducer definido no arquivo, que por sua vez atualiza o estado global com base na a\u00e7\u00e3o despachada. src/examples : Este diret\u00f3rio cont\u00e9m uma s\u00e9rie de exemplos de componentes que podem ser utilizados no projeto. Cada subdiret\u00f3rio dentro de examples representa um tipo espec\u00edfico de componente ou conjunto de componentes, como Breadcrumbs, Cards, Charts, Configurator, Footer, Items, LayoutContainers, Lists, Navbars, Sidenav, Tables e Timeline. Dentro de cada subdiret\u00f3rio, cont\u00eam a implementa\u00e7\u00e3o desses componentes ou exemplos de uso. Por exemplo, dentro do diret\u00f3rio Cards , encontramos subdiret\u00f3rios como BlogCards , InfoCards , MasterCard , ProjectCards e StatisticsCards , cada um contendo diferentes tipos de cart\u00f5es de exemplo. Esses exemplos podem servir como refer\u00eancia para o desenvolvimento de novos componentes ou para entender como os componentes existentes s\u00e3o implementados. src/layouts : Este diret\u00f3rio cont\u00e9m diferentes layouts de p\u00e1ginas que podem ser usados no projeto. Cada subdiret\u00f3rio dentro de layouts representa um tipo espec\u00edfico de layout, como autentica\u00e7\u00e3o, faturamento, dashboard, notifica\u00e7\u00f5es, perfil, rtl (para suporte a idiomas da direita para a esquerda) e tabelas. Dentro de cada subdiret\u00f3rio de layout, h\u00e1 arquivos que cont\u00eam a implementa\u00e7\u00e3o dos componentes que comp\u00f5em esse layout espec\u00edfico. Por exemplo, dentro do diret\u00f3rio authentication , encontramos componentes como BasicLayout , CoverLayout , Footer , reset-password , sign-in e sign-up , que s\u00e3o usados para definir o layout das p\u00e1ginas de autentica\u00e7\u00e3o do aplicativo. Nota : Tem diretorios que n\u00e3o iremos usar, ou fazer modifica\u00e7\u00f5es no decorrer do desevolvimento do sistema. App.js O arquivo App.js \u00e9 respons\u00e1vel por definir a estrutura principal da aplica\u00e7\u00e3o React, incluindo o layout, tema, configura\u00e7\u00f5es globais e navega\u00e7\u00e3o. Funcionalidades Principais: Inicializa\u00e7\u00e3o : Configura o estado global da aplica\u00e7\u00e3o e inicializa\u00e7\u00f5es iniciais, como temas, dire\u00e7\u00e3o (LTR ou RTL), layout e modo escuro. Manipula\u00e7\u00e3o de Eventos : Inclui fun\u00e7\u00f5es para lidar com eventos, como onMouseEnter e onMouseLeave, que controlam a exibi\u00e7\u00e3o da barra lateral em miniatura. Configura\u00e7\u00e3o do Tema : Define o tema da aplica\u00e7\u00e3o com base nas configura\u00e7\u00f5es de modo escuro e dire\u00e7\u00e3o. Renderiza\u00e7\u00e3o de Componentes : Renderiza os componentes principais da aplica\u00e7\u00e3o, como a barra lateral, o configurador e as rotas usando o React Router. Gest\u00e3o de Estado : Utiliza o contexto do React para gerenciar o estado global da aplica\u00e7\u00e3o e suas altera\u00e7\u00f5es ao longo do ciclo de vida. Esse arquivo desempenha um papel fundamental na estrutura e funcionamento da aplica\u00e7\u00e3o React. index.js O arquivo index.js \u00e9 respons\u00e1vel por inicializar a aplica\u00e7\u00e3o React no navegador. Funcionalidades Principais: Inicializa\u00e7\u00e3o da Aplica\u00e7\u00e3o : Utiliza o m\u00e9todo createRoot do pacote react-dom/client para criar o ponto de entrada da aplica\u00e7\u00e3o no DOM. Configura\u00e7\u00e3o do Roteamento : Utiliza o componente BrowserRouter do React Router para fornecer o roteamento da aplica\u00e7\u00e3o. Fornecimento do Contexto : Utiliza o componente MaterialUIControllerProvider do contexto Material UI para fornecer o contexto global da aplica\u00e7\u00e3o. Renderiza\u00e7\u00e3o do Componente Principal : Renderiza o componente principal App, que define a estrutura e o comportamento da aplica\u00e7\u00e3o. routes.js O arquivo routes.js cont\u00e9m a defini\u00e7\u00e3o de todas as rotas da aplica\u00e7\u00e3o Material Dashboard 2 React. Funcionalidades Principais: Defini\u00e7\u00e3o de Rotas : Todas as rotas da aplica\u00e7\u00e3o s\u00e3o adicionadas e configuradas neste arquivo. Cada rota \u00e9 representada por um objeto no array routes . Configura\u00e7\u00e3o de Layouts : Cada rota especifica o layout correspondente que ser\u00e1 renderizado quando a rota for acessada. Configura\u00e7\u00e3o de \u00cdcones : Cada rota possui um \u00edcone associado, que \u00e9 exibido na barra lateral da aplica\u00e7\u00e3o. Configura\u00e7\u00e3o de Componentes : Cada rota especifica o componente correspondente que ser\u00e1 renderizado quando a rota for acessada. Roteamento : As rotas s\u00e3o utilizadas pelo React Router para gerenciar a navega\u00e7\u00e3o da aplica\u00e7\u00e3o. Tipos de Itens : O arquivo define diferentes tipos de itens de rota, como colaps\u00edveis, t\u00edtulos e divisores, para organizar a estrutura da barra lateral da aplica\u00e7\u00e3o. Rodando o Projeto Local Scripts Dispon\u00edveis No diret\u00f3rio do projeto, voc\u00ea pode executar: npm start Inicia o aplicativo no modo de desenvolvimento. Abra http://localhost:3000 para visualiz\u00e1-lo no seu navegador. A p\u00e1gina ser\u00e1 recarregada quando voc\u00ea fizer altera\u00e7\u00f5es. Voc\u00ea tamb\u00e9m pode ver quaisquer erros de lint no console. npm test Inicia o executor de testes no modo interativo de observa\u00e7\u00e3o. Consulte a se\u00e7\u00e3o sobre a execu\u00e7\u00e3o de testes para mais informa\u00e7\u00f5es. npm run build Compila o aplicativo para produ\u00e7\u00e3o na pasta build. Ele agrupa corretamente o React em modo de produ\u00e7\u00e3o e otimiza a compila\u00e7\u00e3o para obter o melhor desempenho. A compila\u00e7\u00e3o \u00e9 minimizada e os nomes de arquivo incluem os hashes. Seu aplicativo est\u00e1 pronto para ser implantado! Consulte a se\u00e7\u00e3o sobre implanta\u00e7\u00e3o para mais informa\u00e7\u00f5es.","title":"Admin"},{"location":"admin/admin/#admin-marcafut","text":"Bem-vindo \u00e0 documenta\u00e7\u00e3o do Admin Marcafut. Nesta se\u00e7\u00e3o, voc\u00ea encontrar\u00e1 informa\u00e7\u00f5es detalhadas sobre todas as configura\u00e7\u00f5es e funcionalidades dispon\u00edveis no Admin Marcafut.","title":"Admin Marcafut"},{"location":"admin/admin/#repositorio-gitlab","text":"Para acessar o c\u00f3digo-fonte do Admin Marcafut, voc\u00ea pode visitar o reposit\u00f3rio no GitLab: Reposit\u00f3rio GitLab","title":"Reposit\u00f3rio GitLab"},{"location":"admin/admin/#documentacao-do-template","text":"O Admin Marcafut \u00e9 baseado em um template para frontend. Abaixo, voc\u00ea encontrar\u00e1 links para a documenta\u00e7\u00e3o e o demo do template: Documenta\u00e7\u00e3o do Template Demo do Template Consulte a documenta\u00e7\u00e3o do template para obter mais informa\u00e7\u00f5es sobre sua estrutura e funcionalidades.","title":"Documenta\u00e7\u00e3o do Template"},{"location":"admin/admin/#tecnologias-necessarias","text":"Para rodar o projeto localmente, \u00e9 necess\u00e1rio ter as seguintes tecnologias instaladas: Node.js : vers\u00e3o 20.11.1 ou superior npm (Node Package Manager) : vers\u00e3o 10.2.4 ou superior Certifique-se de ter essas tecnologias instaladas em seu sistema antes de prosseguir.","title":"Tecnologias Necess\u00e1rias"},{"location":"admin/admin/#estrutura-do-projeto","text":"O projeto \u00e9 estruturado da seguinte forma: src/assets : Esta pasta cont\u00e9m temas, imagens e outros recursos que j\u00e1 fazem parte do template. Nota : Conforme o desenvolvimento do projeto avan\u00e7a, vamos limpar esta pasta para deix\u00e1-la o mais enxuta poss\u00edvel. src/components : Aqui est\u00e3o localizados os componentes que ser\u00e3o usados no projeto. Novos componentes ser\u00e3o criados nesta pasta. src/components : \u00e9 respons\u00e1vel por gerenciar os estados globais dos componentes no projeto utilizando o contexto do React. Ele define um contexto principal chamado MaterialUIContext, que armazena e controla v\u00e1rios estados utilizados pelo projeto. O contexto \u00e9 utilizado para controlar configura\u00e7\u00f5es e funcionalidades globais do aplicativo, como a miniatura da barra lateral, a transpar\u00eancia da barra lateral e da barra de navega\u00e7\u00e3o, a cor da barra lateral, o layout, o modo escuro, entre outros. O arquivo tamb\u00e9m exporta um provedor de contexto chamado MaterialUIControllerProvider, que envolve toda a aplica\u00e7\u00e3o e fornece o contexto MaterialUI para todos os componentes filhos. Al\u00e9m disso, ele exporta um hook personalizado chamado useMaterialUIController, que pode ser utilizado para acessar e modificar os estados globais em qualquer componente que esteja dentro do MaterialUIControllerProvider. Os estados globais podem ser modificados utilizando as fun\u00e7\u00f5es exportadas no arquivo, como setMiniSidenav, setTransparentSidenav, setSidenavColor, entre outras. Essas fun\u00e7\u00f5es s\u00e3o usadas para despachar a\u00e7\u00f5es para o reducer definido no arquivo, que por sua vez atualiza o estado global com base na a\u00e7\u00e3o despachada. src/examples : Este diret\u00f3rio cont\u00e9m uma s\u00e9rie de exemplos de componentes que podem ser utilizados no projeto. Cada subdiret\u00f3rio dentro de examples representa um tipo espec\u00edfico de componente ou conjunto de componentes, como Breadcrumbs, Cards, Charts, Configurator, Footer, Items, LayoutContainers, Lists, Navbars, Sidenav, Tables e Timeline. Dentro de cada subdiret\u00f3rio, cont\u00eam a implementa\u00e7\u00e3o desses componentes ou exemplos de uso. Por exemplo, dentro do diret\u00f3rio Cards , encontramos subdiret\u00f3rios como BlogCards , InfoCards , MasterCard , ProjectCards e StatisticsCards , cada um contendo diferentes tipos de cart\u00f5es de exemplo. Esses exemplos podem servir como refer\u00eancia para o desenvolvimento de novos componentes ou para entender como os componentes existentes s\u00e3o implementados. src/layouts : Este diret\u00f3rio cont\u00e9m diferentes layouts de p\u00e1ginas que podem ser usados no projeto. Cada subdiret\u00f3rio dentro de layouts representa um tipo espec\u00edfico de layout, como autentica\u00e7\u00e3o, faturamento, dashboard, notifica\u00e7\u00f5es, perfil, rtl (para suporte a idiomas da direita para a esquerda) e tabelas. Dentro de cada subdiret\u00f3rio de layout, h\u00e1 arquivos que cont\u00eam a implementa\u00e7\u00e3o dos componentes que comp\u00f5em esse layout espec\u00edfico. Por exemplo, dentro do diret\u00f3rio authentication , encontramos componentes como BasicLayout , CoverLayout , Footer , reset-password , sign-in e sign-up , que s\u00e3o usados para definir o layout das p\u00e1ginas de autentica\u00e7\u00e3o do aplicativo. Nota : Tem diretorios que n\u00e3o iremos usar, ou fazer modifica\u00e7\u00f5es no decorrer do desevolvimento do sistema.","title":"Estrutura do Projeto"},{"location":"admin/admin/#appjs","text":"O arquivo App.js \u00e9 respons\u00e1vel por definir a estrutura principal da aplica\u00e7\u00e3o React, incluindo o layout, tema, configura\u00e7\u00f5es globais e navega\u00e7\u00e3o.","title":"App.js"},{"location":"admin/admin/#funcionalidades-principais","text":"Inicializa\u00e7\u00e3o : Configura o estado global da aplica\u00e7\u00e3o e inicializa\u00e7\u00f5es iniciais, como temas, dire\u00e7\u00e3o (LTR ou RTL), layout e modo escuro. Manipula\u00e7\u00e3o de Eventos : Inclui fun\u00e7\u00f5es para lidar com eventos, como onMouseEnter e onMouseLeave, que controlam a exibi\u00e7\u00e3o da barra lateral em miniatura. Configura\u00e7\u00e3o do Tema : Define o tema da aplica\u00e7\u00e3o com base nas configura\u00e7\u00f5es de modo escuro e dire\u00e7\u00e3o. Renderiza\u00e7\u00e3o de Componentes : Renderiza os componentes principais da aplica\u00e7\u00e3o, como a barra lateral, o configurador e as rotas usando o React Router. Gest\u00e3o de Estado : Utiliza o contexto do React para gerenciar o estado global da aplica\u00e7\u00e3o e suas altera\u00e7\u00f5es ao longo do ciclo de vida. Esse arquivo desempenha um papel fundamental na estrutura e funcionamento da aplica\u00e7\u00e3o React.","title":"Funcionalidades Principais:"},{"location":"admin/admin/#indexjs","text":"O arquivo index.js \u00e9 respons\u00e1vel por inicializar a aplica\u00e7\u00e3o React no navegador. Funcionalidades Principais: Inicializa\u00e7\u00e3o da Aplica\u00e7\u00e3o : Utiliza o m\u00e9todo createRoot do pacote react-dom/client para criar o ponto de entrada da aplica\u00e7\u00e3o no DOM. Configura\u00e7\u00e3o do Roteamento : Utiliza o componente BrowserRouter do React Router para fornecer o roteamento da aplica\u00e7\u00e3o. Fornecimento do Contexto : Utiliza o componente MaterialUIControllerProvider do contexto Material UI para fornecer o contexto global da aplica\u00e7\u00e3o. Renderiza\u00e7\u00e3o do Componente Principal : Renderiza o componente principal App, que define a estrutura e o comportamento da aplica\u00e7\u00e3o.","title":"index.js"},{"location":"admin/admin/#routesjs","text":"O arquivo routes.js cont\u00e9m a defini\u00e7\u00e3o de todas as rotas da aplica\u00e7\u00e3o Material Dashboard 2 React.","title":"routes.js"},{"location":"admin/admin/#funcionalidades-principais_1","text":"Defini\u00e7\u00e3o de Rotas : Todas as rotas da aplica\u00e7\u00e3o s\u00e3o adicionadas e configuradas neste arquivo. Cada rota \u00e9 representada por um objeto no array routes . Configura\u00e7\u00e3o de Layouts : Cada rota especifica o layout correspondente que ser\u00e1 renderizado quando a rota for acessada. Configura\u00e7\u00e3o de \u00cdcones : Cada rota possui um \u00edcone associado, que \u00e9 exibido na barra lateral da aplica\u00e7\u00e3o. Configura\u00e7\u00e3o de Componentes : Cada rota especifica o componente correspondente que ser\u00e1 renderizado quando a rota for acessada. Roteamento : As rotas s\u00e3o utilizadas pelo React Router para gerenciar a navega\u00e7\u00e3o da aplica\u00e7\u00e3o. Tipos de Itens : O arquivo define diferentes tipos de itens de rota, como colaps\u00edveis, t\u00edtulos e divisores, para organizar a estrutura da barra lateral da aplica\u00e7\u00e3o.","title":"Funcionalidades Principais:"},{"location":"admin/admin/#rodando-o-projeto-local","text":"Scripts Dispon\u00edveis No diret\u00f3rio do projeto, voc\u00ea pode executar: npm start Inicia o aplicativo no modo de desenvolvimento. Abra http://localhost:3000 para visualiz\u00e1-lo no seu navegador. A p\u00e1gina ser\u00e1 recarregada quando voc\u00ea fizer altera\u00e7\u00f5es. Voc\u00ea tamb\u00e9m pode ver quaisquer erros de lint no console. npm test Inicia o executor de testes no modo interativo de observa\u00e7\u00e3o. Consulte a se\u00e7\u00e3o sobre a execu\u00e7\u00e3o de testes para mais informa\u00e7\u00f5es. npm run build Compila o aplicativo para produ\u00e7\u00e3o na pasta build. Ele agrupa corretamente o React em modo de produ\u00e7\u00e3o e otimiza a compila\u00e7\u00e3o para obter o melhor desempenho. A compila\u00e7\u00e3o \u00e9 minimizada e os nomes de arquivo incluem os hashes. Seu aplicativo est\u00e1 pronto para ser implantado! Consulte a se\u00e7\u00e3o sobre implanta\u00e7\u00e3o para mais informa\u00e7\u00f5es.","title":"Rodando o Projeto Local"},{"location":"admin/login/","text":"","title":"Login"}]}